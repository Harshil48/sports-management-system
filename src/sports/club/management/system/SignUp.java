/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sports.club.management.system;

/**
 *
 * @author Harshil
 */
import java.awt.event.*;
import javax.swing.*;
import java.sql.*;
import java.util.regex.*;
import java.security.*;
public class SignUp extends javax.swing.JFrame {

    /**
     * Creates new form SignUp
     */
    public SignUp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        holder = new javax.swing.JPanel();
        SignUpForm = new javax.swing.JPanel();
        signupheader = new javax.swing.JLabel();
        SUBMIT = new javax.swing.JButton();
        FirstName = new javax.swing.JLabel();
        LastName = new javax.swing.JLabel();
        fname = new javax.swing.JTextField();
        EmailId = new javax.swing.JLabel();
        emailid = new javax.swing.JTextField();
        Username = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        Password = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        ConfirmPassword = new javax.swing.JLabel();
        confirmpassword = new javax.swing.JPasswordField();
        lname = new javax.swing.JTextField();
        LOGIN = new javax.swing.JButton();
        showpassword = new javax.swing.JCheckBox();
        showconfirmpassword = new javax.swing.JCheckBox();
        imagemini = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SPORTS CLUB MANAGEMENT SYSTEM");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        holder.setOpaque(false);
        holder.setLayout(null);

        SignUpForm.setBackground(new java.awt.Color(255, 255, 255));
        SignUpForm.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(255, 51, 51), new java.awt.Color(255, 51, 51)), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 51, 51), null, null)));

        signupheader.setBackground(new java.awt.Color(255, 255, 255));
        signupheader.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        signupheader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signupheader.setText("SIGN  UP");
        signupheader.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        SUBMIT.setBackground(new java.awt.Color(255, 51, 51));
        SUBMIT.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        SUBMIT.setForeground(new java.awt.Color(255, 255, 255));
        SUBMIT.setText("SUBMIT");
        SUBMIT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SUBMIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SUBMITActionPerformed(evt);
            }
        });

        FirstName.setBackground(new java.awt.Color(255, 255, 255));
        FirstName.setFont(new java.awt.Font("Georgia", 2, 14)); // NOI18N
        FirstName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        FirstName.setText("      First Name");
        FirstName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        LastName.setBackground(new java.awt.Color(255, 255, 255));
        LastName.setFont(new java.awt.Font("Georgia", 2, 14)); // NOI18N
        LastName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        LastName.setText("    Last Name");
        LastName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        fname.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        fname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fnameFocusLost(evt);
            }
        });
        fname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fnameKeyPressed(evt);
            }
        });

        EmailId.setBackground(new java.awt.Color(255, 255, 255));
        EmailId.setFont(new java.awt.Font("Georgia", 2, 14)); // NOI18N
        EmailId.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        EmailId.setText("Email Id");

        emailid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailidFocusLost(evt);
            }
        });
        emailid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                emailidKeyPressed(evt);
            }
        });

        Username.setBackground(new java.awt.Color(255, 255, 255));
        Username.setFont(new java.awt.Font("Georgia", 2, 14)); // NOI18N
        Username.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Username.setText("Username");
        Username.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        username.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        username.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernameFocusLost(evt);
            }
        });
        username.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameKeyPressed(evt);
            }
        });

        Password.setBackground(new java.awt.Color(255, 255, 255));
        Password.setFont(new java.awt.Font("Georgia", 2, 14)); // NOI18N
        Password.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Password.setText("Password");
        Password.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        password.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        password.setEchoChar('\u25CF');
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordKeyPressed(evt);
            }
        });

        ConfirmPassword.setBackground(new java.awt.Color(255, 255, 255));
        ConfirmPassword.setFont(new java.awt.Font("Georgia", 2, 14)); // NOI18N
        ConfirmPassword.setText("Confirm Password");

        confirmpassword.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        confirmpassword.setEchoChar('\u25CF');
        confirmpassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                confirmpasswordFocusGained(evt);
            }
        });
        confirmpassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                confirmpasswordKeyPressed(evt);
            }
        });

        lname.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        lname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lnameFocusLost(evt);
            }
        });
        lname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lnameKeyPressed(evt);
            }
        });

        LOGIN.setBackground(new java.awt.Color(255, 51, 51));
        LOGIN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        LOGIN.setForeground(new java.awt.Color(255, 255, 255));
        LOGIN.setText("LOGIN");
        LOGIN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LOGIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LOGINActionPerformed(evt);
            }
        });

        showpassword.setBackground(new java.awt.Color(255, 255, 255));
        showpassword.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        showpassword.setText("Show Password");
        showpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showpasswordActionPerformed(evt);
            }
        });

        showconfirmpassword.setBackground(new java.awt.Color(255, 255, 255));
        showconfirmpassword.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        showconfirmpassword.setText("Show ConfirmPassword");
        showconfirmpassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showconfirmpasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SignUpFormLayout = new javax.swing.GroupLayout(SignUpForm);
        SignUpForm.setLayout(SignUpFormLayout);
        SignUpFormLayout.setHorizontalGroup(
            SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(signupheader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(SignUpFormLayout.createSequentialGroup()
                .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SignUpFormLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SignUpFormLayout.createSequentialGroup()
                                .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(SignUpFormLayout.createSequentialGroup()
                                .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(LastName, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                    .addComponent(EmailId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lname, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                                    .addComponent(emailid)))))
                    .addGroup(SignUpFormLayout.createSequentialGroup()
                        .addGap(0, 22, Short.MAX_VALUE)
                        .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(SignUpFormLayout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(SignUpFormLayout.createSequentialGroup()
                                .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(SignUpFormLayout.createSequentialGroup()
                                .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ConfirmPassword, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(showpassword)
                                    .addComponent(showconfirmpassword)
                                    .addComponent(confirmpassword, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                                    .addComponent(password)))
                            .addGroup(SignUpFormLayout.createSequentialGroup()
                                .addComponent(LOGIN, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SUBMIT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        SignUpFormLayout.setVerticalGroup(
            SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignUpFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SignUpFormLayout.createSequentialGroup()
                        .addComponent(signupheader, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fname, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(EmailId, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                            .addComponent(emailid))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showpassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmpassword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showconfirmpassword)
                .addGap(26, 26, 26)
                .addGroup(SignUpFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LOGIN, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SUBMIT, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7))
        );

        holder.add(SignUpForm);
        SignUpForm.setBounds(590, 160, 410, 480);

        imagemini.setIcon(new javax.swing.ImageIcon("C:\\Users\\Harshil\\Pictures\\Saved Pictures\\mini.jpg")); // NOI18N
        holder.add(imagemini);
        imagemini.setBounds(0, 0, 1590, 820);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(holder, javax.swing.GroupLayout.DEFAULT_SIZE, 1538, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(holder, javax.swing.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE)
        );

        setBounds(0, 0, 1552, 843);
    }// </editor-fold>//GEN-END:initComponents
     void sqlcon(String query,byte[] salt)
    {
     try{
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection con = DriverManager.getConnection("jdbc:oracle:thin:@Dell-HsB:1521:xe", "HSB", "4803");
            PreparedStatement pstmt=con.prepareStatement(query);
            pstmt.setBytes(1,salt);
            pstmt.execute();
            con.close();
           } catch (Exception e) {
            System.out.println(e);
       }   
    }
     
     private static String getSecurePassword(String passwordToHash, byte[] salt)
    {
        String generatedPassword = null;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(salt);
            byte[] bytes = md.digest(passwordToHash.getBytes());
            StringBuilder sb = new StringBuilder();
            for(int i=0; i< bytes.length ;i++)
            {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString();
        }
        catch (Exception e) {
            System.out.println(e);
        }
        return generatedPassword;
    }
    private static byte[] getSalt() throws NoSuchAlgorithmException, NoSuchProviderException
    {
        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG", "SUN");
        byte[] salt = new byte[16];
        sr.nextBytes(salt);
        return salt;
    }
    
     void submit_action()
     {
         if(fname.getText().isBlank()|| emailid.getText().isBlank() || username.getText().isBlank()|| password.getText().isBlank() || confirmpassword.getText().isBlank())
         {
            JOptionPane.showMessageDialog(imagemini, "ALL FIELDS ARE MANADATORY", "ERROR", JOptionPane.ERROR_MESSAGE);
         }
         else if(password.getText().length()<8)
         {
             JOptionPane.showMessageDialog(imagemini, "PASSWORD MUST CONTAIN ATLEAST 8 CHARACTERS", "ERROR", JOptionPane.ERROR_MESSAGE);
             password.requestFocus();
         }
         else if(!password.getText().equals(confirmpassword.getText()))
         {
             JOptionPane.showMessageDialog(imagemini, "CONFIRM PASSWORD AND PASSWORD DO NOT MATCH", "ERROR", JOptionPane.ERROR_MESSAGE);
         }
         else
         {
        try{
        String passwordToHash =password.getText();
        byte[] salt = getSalt();
        String securePassword = getSecurePassword(passwordToHash, salt);
        String query="insert into HSB.sign_up values ('"+fname.getText()+"','"+lname.getText()+"','"+emailid.getText()+"','"+username.getText()+"','"+securePassword+"',?)";
        sqlcon(query,salt);
             }catch(Exception e) {
            System.out.println(e);
             }
         JOptionPane.showMessageDialog(imagemini, "SUCCESSFULLY REGISTERED", "SignUP", JOptionPane.INFORMATION_MESSAGE);
         fname.setText("");
         lname.setText("");
         emailid.setText("");
         username.setText("");
         password.setText("");
         confirmpassword.setText("");
         }
        }
     
    private void SUBMITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SUBMITActionPerformed
                submit_action();            
    }//GEN-LAST:event_SUBMITActionPerformed

    private void fnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fnameKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN)
        {
            lname.requestFocus();
        }
    }//GEN-LAST:event_fnameKeyPressed

    private void lnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lnameKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN)
        {
            emailid.requestFocus();
        }
        else if(evt.getKeyCode()==KeyEvent.VK_UP)
        {
            fname.requestFocus();
        }
    }//GEN-LAST:event_lnameKeyPressed

    private void usernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN)
        {
            password.requestFocus();
        }
        else if(evt.getKeyCode()==KeyEvent.VK_UP)
        {
            emailid.requestFocus();
        }
    }//GEN-LAST:event_usernameKeyPressed

    private void passwordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordKeyPressed
       if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN)
        {
            if(password.getText().isBlank())
            {
                JOptionPane.showMessageDialog(imagemini,"ENTER THE PASSWORD FIRST","WARNING",JOptionPane.WARNING_MESSAGE );
            }
            else
            {
            confirmpassword.requestFocus();
            }        
            }
            
        else if(evt.getKeyCode()==KeyEvent.VK_UP)
        {
            username.requestFocus();
        }
    }//GEN-LAST:event_passwordKeyPressed

    private void confirmpasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confirmpasswordKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
             if(!password.getText().equals(confirmpassword.getText()))
         {
             JOptionPane.showMessageDialog(imagemini, "CONFIRM PASSWORD DO NOT MATCH THE ENTERED PASSWORD", "ERROR", JOptionPane.ERROR_MESSAGE);
         }
         else
            {
              fname.requestFocus();
              submit_action();
            }
        }
        else if(evt.getKeyCode()==KeyEvent.VK_UP)
        {
            password.requestFocus();
        }
    }//GEN-LAST:event_confirmpasswordKeyPressed

    private void emailidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailidKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN)
        {
            username.requestFocus();
        }
        
        else if(evt.getKeyCode()==KeyEvent.VK_UP)
        {
            lname.requestFocus();
        }
    }//GEN-LAST:event_emailidKeyPressed

    private void emailidFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailidFocusLost
        if(!emailid.getText().isBlank())
        {
        String emailcheck="^[a-zA-Z0-9_+&*-]+(?:\\."+ 
                            "[a-zA-Z0-9_+&*-]+)*@" + 
                            "(?:[a-zA-Z0-9-]+\\.)+[a-z" + 
                            "A-Z]{2,7}$";
        Pattern pat = Pattern.compile(emailcheck); 
        if(!pat.matcher(emailid.getText()).matches())
        {
            JOptionPane.showMessageDialog(imagemini,"INVALID EMAIL ID","ERROR",JOptionPane.ERROR_MESSAGE );
            emailid.requestFocus();
        }
        }
    }//GEN-LAST:event_emailidFocusLost

    private void fnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fnameFocusLost
        String fn=fname.getText();
        int flag=0;
        if(!fn.isBlank())
        {
            for(int i=0;i<fn.length();i++)
            {
            if(!Character.isLetter(fn.charAt(i)))
            {
              flag=1; 
            }
            }
            if(flag==1)
            {
                JOptionPane.showMessageDialog(imagemini,"FIRST NAME MUST CONTAIN ONLY ALPHABETS","ERROR",JOptionPane.ERROR_MESSAGE );
                fname.requestFocus();
            }
        }
    }//GEN-LAST:event_fnameFocusLost

    private void lnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lnameFocusLost
        String ln=lname.getText();
        int flag=0;
        if(!ln.isBlank())
        {
            for(int i=0;i<ln.length();i++)
            {
            if(!Character.isLetter(ln.charAt(i)))
            {
              flag=1; 
            }
            }
            if(flag==1)
            {
                JOptionPane.showMessageDialog(imagemini,"LAST NAME MUST CONTAIN ONLY ALPHABETS","ERROR",JOptionPane.ERROR_MESSAGE );
                lname.requestFocus();
            }
        }
    }//GEN-LAST:event_lnameFocusLost

    private void confirmpasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_confirmpasswordFocusGained
        if(password.getText().isBlank())
        {
            password.requestFocus();
            JOptionPane.showMessageDialog(imagemini,"ENTER THE PASSWORD FIRST","WARNING",JOptionPane.WARNING_MESSAGE );
           
        }
    }//GEN-LAST:event_confirmpasswordFocusGained

    private void usernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFocusLost
        if(!username.getText().isBlank())
        {
            try{
            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection con = DriverManager.getConnection("jdbc:oracle:thin:@Dell-HsB:1521:xe", "system", "0000");
            Statement stmt=con.createStatement();
            String query="select username from HSB.sign_up";
            ResultSet rs=stmt.executeQuery(query);
            while(rs.next())
        {
            if(username.getText().equals(rs.getString(1)))
            {
                JOptionPane.showMessageDialog(imagemini,"USERNAME ALREADY EXISTS . . .\nTRY A DIFFERENT USERNAME ","ERROR", JOptionPane.ERROR_MESSAGE);
                username.requestFocus();
                break;           
            }
            
        }
            con.close();
        }catch (Exception e) {
            System.out.println(e);
        }
        }
    }//GEN-LAST:event_usernameFocusLost

    private void LOGINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOGINActionPerformed
        new SCMS().setVisible(true);
        super.dispose();
    }//GEN-LAST:event_LOGINActionPerformed

    private void showpasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showpasswordActionPerformed
        if(showpassword.isSelected())
        {
            password.setEchoChar((char)0);
        }
        else
        {
            password.setEchoChar('\u25CF');
        }
    }//GEN-LAST:event_showpasswordActionPerformed

    private void showconfirmpasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showconfirmpasswordActionPerformed
        if(showconfirmpassword.isSelected())
        {
            confirmpassword.setEchoChar((char)0);
        }
        else
        {
            confirmpassword.setEchoChar('\u25CF');
        }
    }//GEN-LAST:event_showconfirmpasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SignUp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ConfirmPassword;
    private javax.swing.JLabel EmailId;
    private javax.swing.JLabel FirstName;
    private javax.swing.JButton LOGIN;
    private javax.swing.JLabel LastName;
    private javax.swing.JLabel Password;
    private javax.swing.JButton SUBMIT;
    private javax.swing.JPanel SignUpForm;
    private javax.swing.JLabel Username;
    private javax.swing.JPasswordField confirmpassword;
    private javax.swing.JTextField emailid;
    private javax.swing.JTextField fname;
    private javax.swing.JPanel holder;
    private javax.swing.JLabel imagemini;
    private javax.swing.JTextField lname;
    private javax.swing.JPasswordField password;
    private javax.swing.JCheckBox showconfirmpassword;
    private javax.swing.JCheckBox showpassword;
    private javax.swing.JLabel signupheader;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
